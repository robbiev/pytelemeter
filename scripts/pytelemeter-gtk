#!/usr/bin/python
#
# pytelemeter GTK script 
# Shows some statistics from the "Mijn Telenet" page.
# 
# See COPYING for info about the license (GNU GPL)
# Check AUTHORS to see who wrote this software.

import pygtk
pygtk.require('2.0')
import gtk
from pytelemeter import Telemeter
import sys
from pytelemeter import VERSION
import string,datetime,time,random

class PyTeleGui:
	def fillInfo(self, widget, data=None):
		self.meter = Telemeter()
		if str(self.eu.get_text()) != "" and str(self.ep.get_text()) != "":
                        self.meter.setConfig(str(self.eu.get_text()),str(self.ep.get_text()))
		try:
			self.meter.fetch()
			a,b = self.meter.getVolumeUsed(1)
			dval = float(int(a))/100
	        	uval = float(int(b))/100
       			self.dbar.set_fraction(dval)
        		self.ubar.set_fraction(uval)
        		self.dbar.set_text(str(a) + "%")
        		self.ubar.set_text(str(b) + "%")
			self.window.show()
        		#meter = Telemeter()
        		#meter.fetch(0)
        		overview = self.meter.getOverview()
        		#print "Day      | Total  | Upload"
		        self.liststore.clear()
        	        for date,total,upload in overview:
                	        self.add_row(date,total,upload)
                
                	self.eu.set_text(self.meter.username)
                	self.ep.set_text(self.meter.password)

		except:
			print "Check your settings..."
			#raise
			pass	
	def add_row(self, date, total, upload):
	        rand = self.rand

	        myDate = string.split(date,"/")
	        finalDate = "20" + myDate[2] + "/" + myDate[1] + "/" + myDate[0]
	        i0 = self.frameDaily.sm.get_model().append([finalDate,int(total),int(upload)])
        	#print datetime.date.strftime("%d %b %Y",int(datetime.date(time.strftime("%Y",time.localtime(time.time())))),int(myDate[1]),int(myDate[0]))
        	sel = self.frameDaily.tv.get_selection()
        	i1 = self.frameDaily.sm.convert_child_iter_to_iter(None, i0)
        	sel.select_iter(i1)


	def delete_event(self, widget, event, data=None):
        	gtk.main_quit()
        	return gtk.FALSE

	def __init__(self):
		#self.meter = Telemeter() 
		# Create a new window
        	self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_resizable(gtk.FALSE)
        	self.window.set_position(gtk.WIN_POS_CENTER)
		# Set the window title
        	self.window.set_title("pytelemeter v" + VERSION)

        	# Set a handler for delete_event that immediately
        	# exits GTK.
        	self.window.connect("delete_event", self.delete_event)

        	# Sets the border width of the window.
        	self.window.set_border_width(5)
		self.window.set_size_request(-1,350)
        	vbox = gtk.VBox(homogeneous=gtk.FALSE, spacing=0)
		vbox.show()
		self.window.add(vbox)
		#Maintable = gtk.Table(2,4,gtk.FALSE)
       	 	#self.window.add(Maintable)

        	# Create a new notebook, place the position of the tabs
        	notebook = gtk.Notebook()
        	notebook.set_tab_pos(gtk.POS_TOP)
        	#Maintable.attach(notebook, 0,2,0,1,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND|gtk.FILL, xpadding=3, ypadding=3)
        	vbox.pack_start(notebook, expand=gtk.TRUE, fill=gtk.TRUE, padding=0)
		notebook.show()
        	self.show_tabs = gtk.TRUE
        	#self.show_border = gtk.TRUE


        	# Let's append a bunch of pages to the notebook
        	bufferf = "Volume used"
        	bufferl = "Volume"
        	frameVolume = gtk.Frame(bufferf) #gtk.AspectFrame(label=bufferf, xalign=0.5, yalign=0.5, ratio=1.0, obey_child=gtk.TRUE)
        	frameVolume.set_border_width(20)
        	#frameVolume.set_size_request(100, 75)
        	frameVolume.show()
        	label = gtk.Label(bufferl)

		# op deze tabpage voegen we de volume info toe	
                tableVolume = gtk.Table(2, 2, gtk.FALSE)

                # Put the table in the frame 
                frameVolume.add(tableVolume)

                labeld = gtk.Label("Download")
                labelu = gtk.Label("Upload")
                tableVolume.attach(labeld, 0, 1, 0, 1, xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                labeld.show()
                tableVolume.attach(labelu, 0, 1, 1, 2, xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=5, ypadding=5)
                labelu.show()

                # progress bars
                self.dbar = gtk.ProgressBar()
                tableVolume.attach(self.dbar, 1, 2, 0, 1,xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                self.dbar.show()

                self.ubar = gtk.ProgressBar()
                tableVolume.attach(self.ubar, 1, 2, 1, 2,xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                self.ubar.show()

                # hline
                #separator = gtk.HSeparator()
                #tableVolume.attach(separator, 0, 2, 2, 3,xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=5, ypadding=5)
                #separator.show()

                # table for some buttons 
                #tableButtons = gtk.Table(1, 2, gtk.FALSE)

                # Add a button to exit the program
                #button = gtk.Button("Close")
                #button.connect("clicked", gtk.mainquit)
                #tableButtons.attach(button, 1, 2, 0, 1,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND|gtk.FILL, xpadding=5, ypadding=3)
                #button.show()

                # Button for refresh
                #button2 = gtk.Button("Refresh")
                #button2.connect("clicked", self.fillInfo)
                #tableButtons.attach(button2, 0, 1, 0, 1,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND|gtk.FILL, xpadding=5, ypadding=3)
                #button2.show()

                #tableVolume.attach(tableButtons, 0, 2, 3, 4,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND|gtk.FILL, xpadding=0, ypadding=0)

                # Show tables
                tableVolume.show()
                #tableButtons.show()
                #self.window.show()

        	notebook.append_page(frameVolume, label)

        	bufferf = "Daily statistics"
        	bufferl = "Daily history"
        	self.frameDaily = gtk.Frame(bufferf) #gtk.AspectFrame(label=bufferf, xalign=0.5, yalign=0.5, ratio=1.0, obey_child=gtk.TRUE)
        	self.frameDaily.set_border_width(20)
        	self.frameDaily.set_size_request(100, 75)
		self.frameDaily.show()
		label = gtk.Label(bufferl)
        	

	        # create a liststore with three int columns
	        self.liststore = gtk.ListStore(str, int, int)
	
	        # create a random number generator
	        self.rand = random.Random()

	        # Create new windows
	        #self.w = [None] * 3

	        #for n in range(3):
	        win = self.frameDaily
		win.tablehold = gtk.Table(0,0,gtk.FALSE)
		win.vboxDaily = gtk.VBox()
	        win.add(win.vboxDaily)
     		win.sw = gtk.ScrolledWindow()
        	win.sm = gtk.TreeModelSort(self.liststore)
        	# Set sort column
        	win.sm.set_sort_column_id(0, gtk.SORT_DESCENDING)
        	win.tv = gtk.TreeView(win.sm)
        	#win.vbox.pack_start(win.sw,expand=gtk.TRUE, fill=gtk.TRUE, padding=5)
        	win.vboxDaily.pack_start(win.sw, padding=10)
		#win.tablehold.attach(win.sw,0,1,0,1,xoptions=gtk.FILL|gtk.EXPAND, yoptions=gtk.FILL|gtk.EXPAND, xpadding=0, ypadding=0)
		#win.add(win.tablehold)
		win.sw.add(win.tv)
        	win.tv.column = [None]*3
        	win.tv.column[0] = gtk.TreeViewColumn('Day')
        	win.tv.column[1] = gtk.TreeViewColumn('Total (MiB)')
        	win.tv.column[2] = gtk.TreeViewColumn('Upload (MiB)')
        	win.tv.cell = [None]*3
        	for i in range(3):
        	    win.tv.cell[i] = gtk.CellRendererText()
        	    win.tv.append_column(win.tv.column[i])
        	    win.tv.column[i].set_sort_column_id(i)
        	    win.tv.column[i].pack_start(win.tv.cell[i], True)
        	    win.tv.column[i].set_attributes(win.tv.cell[i], text=i)
        	    win.show_all()


		notebook.append_page(self.frameDaily, label)

        	bufferf = "Config"
        	bufferl = "Config"
        	frameConfig = gtk.Frame(bufferf) #gtk.AspectFrame(label=bufferf, xalign=0.5, yalign=0.5, ratio=1.0, obey_child=gtk.TRUE)
        	frameConfig.set_border_width(20)
        	frameConfig.set_size_request(100, 75)
        	frameConfig.show()
        	label = gtk.Label(bufferl)
        	

                # op deze tabpage voegen we de volume info toe  
                tableConfig = gtk.Table(2, 2, gtk.FALSE)

                # Put the table in the frame 
                frameConfig.add(tableConfig)

                labeld = gtk.Label("User")
                labelu = gtk.Label("Password")
                tableConfig.attach(labeld, 0, 1, 0, 1, xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                labeld.show()
                tableConfig.attach(labelu, 0, 1, 1, 2, xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=5, ypadding=5)
                labelu.show()

                # progress bars
                self.eu = gtk.Entry()
                tableConfig.attach(self.eu, 1, 2, 0, 1,xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                self.eu.show()
        	#self.eu.set_editable(gtk.FALSE)        
	
		self.ep = gtk.Entry()
                tableConfig.attach(self.ep, 1, 2, 1, 2,xoptions=gtk.FILL, yoptions=gtk.FILL, xpadding=10, ypadding=10)
                self.ep.show()
		#self.ep.set_editable(gtk.FALSE)
		self.ep.set_visibility(gtk.FALSE)
		#self.ep.set_invisible_char()
		self.eu.set_text("")
		self.ep.set_text("")	


		tableConfig.show()
		notebook.append_page(frameConfig, label)

        	# Set what page to start at (page 1)
        	notebook.set_current_page(0)

        	# Create a bunch of buttons
        	Maintable = gtk.Table(1,2,gtk.FALSE)
		
	        # Button for refresh
                button = gtk.Button(stock=gtk.STOCK_REFRESH)
                button.connect("clicked", self.fillInfo)
                Maintable.attach(button, 0, 1 , 0, 1, xpadding=5, ypadding=5)
                button.show()

		button = gtk.Button(stock=gtk.STOCK_QUIT)
        	button.connect("clicked", gtk.mainquit)
        	Maintable.attach(button, 1,2,0,1, xpadding=5, ypadding=5)
       		button.show()



        	#button = gtk.Button("<")
        	#button.connect("clicked", lambda w: notebook.prev_page())
        	#Maintable.attach(button, 2,3,0,1, xpadding=5, ypadding=5)
        	#button.show()

        	#button = gtk.Button(">")
        	#button.connect("clicked", lambda w: notebook.next_page())
        	#Maintable.attach(button, 3,4,0,1, xpadding=5, ypadding=5)
        	#button.show()

		vbox.pack_start(Maintable, expand=gtk.FALSE, fill=gtk.FALSE, padding=0)	

        	Maintable.show()
        	#window.show()


def main():
	gtk.main()
	return 0       

if __name__ == "__main__":
	GUI = PyTeleGui()
	GUI.fillInfo(gtk.Button, None)
	main()
	sys.exit(0)
