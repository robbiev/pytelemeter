#!/usr/bin/env python
#
# See COPYING for info about the license (GNU GPL)
# Check AUTHORS to see who wrote this software.
"""
pytelemeter v%s
Fetch bandwidth usage statistics from the Belgian ISP Telenet
Homepage: <http://pytelemeter.sourceforge.net>

Usage:  pytelemeter [options...]
        pytelemeter-gtk [options...]
        pytelemeter-tray [options...]

Interface options:
  -c, --cli             command line interface
                            default when invoked as pytelemeter
  -g, --gui, --gtk      open the GTK graphical user interface
                            default when invoked as pytelemeter-gtk
  -t, --tray            open the system tray icon
                            default when invoked as pytelemeter-tray

Output options:
  -m, -r, --remaining   also output remaining bandwidth
  -d, --daily           also output daily statistics
  -b, --daily-bars      add barchart to daily stats (implies -d)

  -p, --property=name   only output a single property (implies -c -s)
                            for a list of implemented properties,
                            use --property=help (or -phelp)

  -s, --silent          silent mode
  -v. --verbose         verbose output (always on for cli)
  -D, --debug           show (http) debug info

Help options:
  -h, --help            print this message and exit
  -V, --version         print the version string and exit
"""

from pytelemeter.Telemeter import Telemeter
from pytelemeter.Parser import *
from pytelemeter import VERSION
import sys
import getopt
import time

__version__ = 'pytelemeter v%s' % VERSION

propertieshelp = """pytelemeter v%s

Usage:  pytelemeter -p <property>
        pytelemeter --property=<property>

Currently implemented properties:""" % VERSION

properties = [
    (['download', 'download-mib'], 'down.mib',
        'MiB downloaded so far this month'),
    (['download-pct'], 'down.pct',
        'current download percentage'),
    (['upload', 'upload-mib'], 'up.mib',
        'MiB uploaded so far this month'),
    (['upload-pct'], 'up.pct',
        'current upload percentage'),
    (['daysleft'], 'daysleft',
        'number of days until next reset'),
    (['nextbill', 'nextreset'], 'nextbill',
        'date of next reset (yyyy-mm-dd)'),
    ]

def gtk():
    try:
        from pytelemeter.GTK import TelemeterGUI
        return TelemeterGUI(meter)
    except:
        if output.debug:
            raise
        else:
            print >> sys.stderr, 'Warning: failed to initialize GTK' +\
                ' interface, try -D for debugging info'
            return None
def tray():
    try:
        from pytelemeter.Tray import TelemeterTray
        return TelemeterTray(meter)
    except:
        if output.debug:
            raise
        else:
            print >> sys.stderr, 'Warning: failed to initialize tray' +\
                ' icon, try -D for debugging info'
            return None

if __name__ == "__main__":
    output = Output()
    meter = Telemeter(output)
    gui = None
    prop = None

    name = sys.argv[0]
    if name.endswith('-gtk'):
        gui = gtk()
    elif name.endswith('-tray'):
        gui = tray()
    try:
       options, args = getopt.getopt(sys.argv[1:], 'cgtmrdbp:svDhV',
            ['cli', 'gui', 'gtk', 'tray', 'remaining', 'daily',
            'daily-bars', 'property=', 'silent', 'verbose' , 'debug',
            'help', 'version'])
    except getopt.GetoptError:
        print >> sys.stderr, __doc__ % VERSION
        sys.exit(2)

    for opt, arg in options:
        if opt in ('-g', '--gui', '--gtk'):
            gui = gtk()
        elif opt in ('-t', '--tray'):
            gui = tray()
        elif opt in ('-c', '--cli'):
            gui = None
        elif opt in ('-d', '--daily'):
            output.daily = True
        elif opt in ('-b', '--daily-bars'):
            output.daily = True
            output.dailybars = True
        elif opt in ('-p', '--property'):
            if arg in ('help'):
                print propertieshelp
                for names, loc, help in properties:
                    print ' ', ', '.join(names).ljust(25), help
                print
                sys.exit(0)
            prop = arg
            output.silent = True
        elif opt in ('-m', '-r', '--remaining'):
            output.remaining = True
        elif opt in ('-s', '--silent'):
            output.silent = True
        elif opt in ('-v', '--verbose'):
            output.verbose = True
        elif opt in ('-D', '--debug'):
            output.debug = True
        elif opt in ('-h', '--help'):
            print __doc__ % VERSION
            sys.exit(0)
        elif opt in ('-V', '--version'):
            print __version__
            sys.exit(0)

    if output.debug:
        import httplib
        httplib.HTTPConnection.debuglevel = 1
    if prop:
        for names, loc, help in properties:
            if prop in names:
                meter.fetch()
                print eval('meter.usage.%s' % loc)
                sys.exit(0)
        print >> sys.stderr, "Error: no such property: %s" % prop
        sys.exit(2)
    elif gui:
        gui.refresh()
        import gtk
        gtk.main()
    else:
        output.verbose = True
        meter.fetch()
