#!/usr/bin/env python
#
# pytelemeter CLI script 
# Geeft download en upload statistieken van de Mijn Telenet pagina.
# 
# door Robbie Vanbrabant <robbie.vanbrabant@pandora.be>
# en Thomas Matthijs <knu@keanu.be>

from pytelemeter import Telemeter
import getopt, sys, time
from pytelemeter import VERSION

def usage():
	print "\npytelemeter v%s" % VERSION
	print "http://pytelemeter.sourceforge.net"
	print "\nUsage: " + sys.argv[0] + " [options]"
	print "Options:"
	print "  -h\tshow this message"
	print "  -d\tshow daily statistics"
	print "  -m\tcalculate volume left"
        print "  -s\tsilent mode"

def makeScale(perc,schaal):
	if (perc > 100):
		return "Exceeded!".center(20)
	scale = ""
	aant = (float(perc)/schaal) * schaal/10
	scale += "=" * int(round(aant * schaal/10))
	scale += " " * int(round(schaal - (aant * schaal/10)))
	return scale

def printStats(meter,silent):
	totalMib,uploadMib = meter.getVolumeUsed(0)
	totalProc,uploadProc = meter.getVolumeUsed(1)
	
        if silent == 0:
	    print "\nTelemeter statistics @ %s" % time.strftime("%d %b %Y",time.localtime(time.time()))
	    print "----------------------------------"
    
	print "%s [%s] %5s MiB (%s%%)" % ("Volume used: ", makeScale(totalProc, 20), totalMib, totalProc)
	print "%s [%s] %5s MiB (%s%%)" % ("Upload used: ", makeScale(uploadProc, 20), uploadMib, uploadProc)
        if silent == 0:
        	print ""

def printOverview(meter,silent):
	overview = meter.getOverview()
        if silent == 0:
	    print "Daily statistics:"
	    print "-----------------"
	    print "Day      | Total  | Upload"
	for date,total,upload in overview:
		print '%s | %6s | %6s' % (date,total,upload)
        if silent == 0:
        	print ""

def printMaxDownload(meter,silent):
	totalMax, uploadMax = meter.getVolumeMax()
	overview = meter.getOverview()
	totalMib,uploadMib = meter.getVolumeUsed(0)
	
	totalMax = totalMax*1024
	uploadMax = uploadMax*1024

	if (totalMax <= uploadMib):
		print "%s %i MiB. Your connection will be restored on %s" % ("You exceeded the maximum volume allowed.", (totalMib - totalMax),meter.getDateBroad())
	else:
		print "%s %i %s" % ("Today you can download",totalMax - totalMib + int(overview[0][1]),"MiB without exceeding your download volume.")
	
	if (uploadMax <= uploadMib):
		print "%s %i MiB. Your connection will be restored on %s" % ("You exceeded the maximum volume allowed.", (uploadMib * uploadMax),meter.getDateBroad())
	else:
		print "%s %i %s" % ("Today you can upload",uploadMax - uploadMib + int(overview[0][2]),"MiB without exceeding your upload volume.")
        if silent == 0:
        	print ""

def main():
	try:
		o, a = getopt.getopt(sys.argv[1:], ":hdms")
	except getopt.GetoptError:
		usage()
		sys.exit(2)
		
	showDay = 0
	showMax = 0
	opts = {}
        silent = 0
	for k,v in o:
		opts[k] = v
	if opts.has_key('-h') or opts.has_key('--help'):
		usage()
		sys.exit()
	if opts.has_key("-d"):
		showDay = 1 
	if opts.has_key("-m"):
		showMax = 1
        if opts.has_key("-s"):
                silent = 1

	meter = Telemeter()

	meter.fetch(silent)

	printStats(meter,silent)

	if showMax == 1:
		printMaxDownload(meter,silent)
	if showDay == 1:
		printOverview(meter,silent)

if __name__ == "__main__":
	main()
	sys.exit(0)
