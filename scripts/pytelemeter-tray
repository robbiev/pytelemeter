#!/usr/bin/env python
#
# pytelemeter System Tray (freedesktop.org compliant) script based on libegg (written in C).
# Shows some statistics from the "Mijn Telenet" page.
# 
# See COPYING for info about the license (GNU GPL)
# Check AUTHORS to see who wrote this software.

try:
        import pygtk
        pygtk.require('2.0')
except ImportError:
        pass
except AssertionError:
        pass
try:
        import gtk
except ImportError:
        pass
except AssertionError:
        pass

import pytelemeter.pytrayicon
from pytelemeter.Telemeter import Telemeter
from pytelemeter.GTK import PyTeleGui
import os,sys

class Tray:
    
	def __init__(self, ):
		
		self.meter = Telemeter()	
	
        	self.tray = pytelemeter.pytrayicon.TrayIcon("pytelemeter");
        	eventbox = gtk.EventBox()
        	self.tray.add(eventbox)
        	eventbox.connect("button_press_event", self.clicked)

        	image = gtk.Image()
        	pixbuf = gtk.gdk.pixbuf_new_from_file("/usr/share/pixmaps/pytele.png")
        	scaled_buf = pixbuf.scale_simple(16,16,gtk.gdk.INTERP_BILINEAR)
        	image.set_from_pixbuf(scaled_buf)
        	eventbox.add(image)
		
		#label = gtk.Label("P")
		#eventbox.add(label)
		
		self.tooltip = gtk.Tooltips()

		self.tooltip.set_tip(self.tray,"Pytelemeter\nDouble click to open GTK interface\nRight click for options")
	
		self.menu = gtk.Menu()

		# Create the menu items
		refresh_item = gtk.ImageMenuItem(stock_id=gtk.STOCK_REFRESH, accel_group=None)
		open_item = gtk.ImageMenuItem(stock_id=gtk.STOCK_OPEN, accel_group=None)
		quit_item = gtk.ImageMenuItem(stock_id=gtk.STOCK_QUIT, accel_group=None)
		# Add them to the menu
		self.menu.append(refresh_item)
		self.menu.append(open_item)
		self.menu.append(quit_item)

		refresh_item.connect_object("activate", self.menuitem_response, "refresh")

		# Attach the callback functions to the activate signal
		open_item.connect_object("activate", self.menuitem_response, "open")

		# We can attach the Quit menu item to our exit function
		quit_item.connect_object ("activate", self.menuitem_response, "quit")

		# We do need to show menu items
		refresh_item.show()
		open_item.show()
		quit_item.show()


		self.tray.show_all()
   #         self.tray.show_all()
   #     else:
   #         self.tray.hide()

	def cacheGTK(self):
	       self.GUIGTK = PyTeleGui(1)
	       self.GUIGTK.fillInfo(gtk.Button, 0, GUI.getMeter())

	def showGTK(self):
		self.cacheGTK()
		self.GUIGTK.show()

	def fillInfo(self):
                self.meter.fetch()
                totalMib,uploadMib = self.meter.getVolumeUsed(0)
                totalProc,uploadProc = self.meter.getVolumeUsed(1)
		tooltipString = "Total:\t%s%%\nUpload:\t%s%%\n\nDouble click to open GTK interface\nRight click for options" %(totalProc,uploadProc)
		self.tooltip.set_tip(self.tray,tooltipString)

	def menuitem_response(self, string):
		if string == "open":
			#open
		#	os.system("pytelemeter-gtk")
			self.showGTK()	
		elif string == "quit":
			#quit
			gtk.main_quit()
		elif string == "refresh":
			self.fillInfo()
			self.showGTK

	def clicked(self, signal, event):
		# which button was clicked?
  		if event.button == 1:
  			self.left_clicked(event)
		elif event.button == 2:
   			pass
  		elif event.button == 3:
   			self.right_clicked(event)

	def left_clicked(self, event):
		if event.type == gtk.gdk._2BUTTON_PRESS:
			#os.system("pytelemeter-gtk")
			self.showGTK()
	def right_clicked(self, event):
		if event.type == gtk.gdk.BUTTON_PRESS:
			self.popup(event)

	def popup(self, event):
   		self.menu.popup(None,None,None,event.button,event.time)

	def getMeter(self):
		return self.meter
def main():
        gtk.main()
        return 0

if __name__ == "__main__":
        GUI = Tray()
	GUI.fillInfo()
	#GUI.cacheGTK()
	main()
        sys.exit(0)
 
