#!/usr/bin/python
import pytelemeter
import pytelemeter.pytrayicon
import pygtk
#pygtk.require('2.0')
import gtk
import os,sys

class Tray:
    
	def __init__(self, ):
        	self.tray = pytelemeter.pytrayicon.TrayIcon("pytelemeter");
        	eventbox = gtk.EventBox()
        	self.tray.add(eventbox)
        	eventbox.connect("button_press_event", self.clicked)

        	#image = gtk.Image()
        	#pixbuf = gtk.gdk.pixbuf_new_from_file(straw.main.get_icon())
        	#scaled_buf = pixbuf.scale_simple(16,16,gtk.gdk.INTERP_BILINEAR)
        	#image.set_from_pixbuf(scaled_buf)
        	#eventbox.add(image)
		label = gtk.Label("P")
		eventbox.add(label)
		
		tooltip = gtk.Tooltips()
		tooltip.set_tip(self.tray,"Pytelemeter\nDouble click to open GTK interface\nRight click for options")
	
		self.menu = gtk.Menu()

		# Create the menu items
		open_item = gtk.ImageMenuItem(stock_id=gtk.STOCK_OPEN, accel_group=None)
		quit_item = gtk.ImageMenuItem(stock_id=gtk.STOCK_QUIT, accel_group=None)
		# Add them to the menu
		self.menu.append(open_item)
		self.menu.append(quit_item)

		# Attach the callback functions to the activate signal
		open_item.connect_object("activate", self.menuitem_response, "open")

		# We can attach the Quit menu item to our exit function
		quit_item.connect_object ("activate", self.menuitem_response, "quit")

		# We do need to show menu items
		open_item.show()
		quit_item.show()


		self.tray.show_all()
#        self._tooltip = gtk.Tooltips()
#        self.unread_count = 0
#        self._feedlist = straw.FeedList.get_instance()
#        for feed in self._feedlist.flatten_list():
#            self.__add_feed(feed)


#    def feed_added(self, signal):
#        self.__add_feed(signal.feed)

#    def __add_feed(self, feed):
#        feed.signal_connect(straw.NewItemsSignal, self.update)
#        feed.signal_connect(straw.ItemsAddedSignal, self.update)
#        feed.signal_connect(straw.ItemReadSignal, self.update)
#        feed.signal_connect(straw.ItemDeletedSignal, self.update)
#        feed.signal_connect(straw.AllItemsReadSignal, self.update)

   # def update(self,signal):
   #     uritems = urfeeds = 0
   #     for ur in [f.number_of_unread for f in self._feedlist.flatten_list()]:
   #         if ur:
   #             uritems += ur
   #             urfeeds += 1
   #     if uritems == self.unread_count:
   #         return
   #     self.unread_count = uritems
   #     if uritems > 0:
   #         self._tooltip.set_tip(self.tray, _("%d new items")%uritems)
   #         self.tray.show_all()
   #     else:
   #         self.tray.hide()

	def menuitem_response(self, string):
		if string == "open":
			#open
			os.system("pytelemeter-gtk")	
		elif string == "quit":
			#quit
			gtk.main_quit()

	def clicked(self, signal, event):
		#os.system("pytelemeter-gtk")	 
		# which button was clicked?
  		if event.button == 1:
  			self.left_clicked(event)
		elif event.button == 2:
   			pass
  		elif event.button == 3:
   			self.right_clicked(event)

  		# was it a multiple click?
  		#if event.type == gtk.gdk.BUTTON_PRESS:
   		#	print "single click"
  		#elif event.type == gtk.gdk._2BUTTON_PRESS:
   		#	print "double click"
  		#elif event.type == gtk.gdk._3BUTTON_PRESS:
   	#		print "triple click. ouch, you hurt your user."	


	def left_clicked(self, event):
		if event.type == gtk.gdk._2BUTTON_PRESS:
			os.system("pytelemeter-gtk")
	def right_clicked(self, event):
		if event.type == gtk.gdk.BUTTON_PRESS:
			self.popup(event)

	def popup(self, event):
   		self.menu.popup(None,None,None,event.button,event.time)
def main():
        gtk.main()
        return 0

if __name__ == "__main__":
        GUI = Tray()
        main()
        sys.exit(0)
 
